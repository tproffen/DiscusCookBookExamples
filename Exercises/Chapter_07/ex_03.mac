discus
############################################################
# EXERCISE STACKING FAULTS  3
#
# Simulate a closed packed structure with deformation faults
#
############################################################
#
if($0.ne.2) then
  echo " Usage: @ex_03.mac <probability>,{ hex  |  cub }"
  continue suite
endif
#
############################################################
#
#    prob      stacking fault probability
#    layers    number of layers
#    naver     number of crystals to be averaged
#    hmin      lower limit for loop over h
#    hmax      upper limit for loop over h
#    kmin      lower limit for loop over k
#    kmax      upper limit for loop over k
#    hh        dummy variables
#    kk        dummy variables
#    itype     dummy variables
############################################################
#
#  The macro starts by defining a few useful variables
#  and stores the probability that is given as parameter
#  The variables are written into file 'ex_03.setup.mac',
#  to be used in the plot macro
#
system mkdir -p INDI
variable real,prob
variable integer,layers
variable integer,naver
variable integer,hmin
variable integer,hmax
variable integer,kmin
variable integer,kmax
variable integer,hh
variable integer,kk
variable integer,itype
variable integer,indiv
#
prob   = $1
layers =  4000
naver  =    50
hmin   = 1
hmax   = 1
kmin   = 0
kmax   = 0
fclose all
fopen  1, ex_03.setup.mac
fput   1,'prob  = ',prob
fput   1,'naver = ',naver
fput   1,'hmin  = ',hmin
fput   1,'hmax  = ',hmax
fput   1,'kmin  = ',kmin
fput   1,'kmax  = ',kmax
fclose 1
#
############################################################
#
read
  cell  hexagonal.cell, 1, 1, 1
#
############################################################
#
#  At first a general setup for the Fourier transform is
#  defined
#
fourier
  abs    l
  ord    h
  na  1501
  no     1
  neut
  temp ignore
  disp off
  wvle 1.0
  set  aver,0.0
exit
############################################################
#
#  The outer loop runs over all crystals to be averaged
#  Within this loop, the stacking fault sequence is generated
#  and a loop over all hk positions calculates the 
#  Fouriertransform along an xxL rod
#  Files are saved into directory INDI with file names:
#  def.$2.hkl_x.xx_yyyy
#  $2 is replaced by hex or cub, according to parameter 2
#
#  x.xx is the stacking fault probability,
#  yyyy the number of the crystal
#
do indiv=1,naver
#
  if('$2'.eq.'hex') then
    read
      lcell, base_$2.cell, 1, 1, layers/2
  elseif('$2'.eq.'cub') then
    read
      lcell, base_$2.cell, 1, 1, layers
  endif
#
  do i[1]=1,n[1]-1
    if(ran(0).lt.prob) then
      itype   = m[i[1]]+1
      m[i[1]] = mod(itype-1,2) + 1
    endif
  enddo
  save
    outf origin.list
    run
  exit
eval n[1]
#
  read
    cell  hexagonal.cell, 1, 1, 1

#
  stack
    layer   hexagonal.cell
    layer   hexagonal.cell
    trans   1,1, 1./3.,-1./3., 1./2
    trans   1,2,-1./3., 1./3., 1./2
    trans   2,1, 1./3.,-1./3., 1./2
    trans   2,2,-1./3., 1./3., 1./2
#
    distr   file,origin.list
    number  layers
#
    aver    0.00, 0.00, 1.00
    modul   1.00, 0.00, 0.00, 0.00, 1.00, 0.00
    set     modulus,off
    set     trans,fixed
    create
  exit
#
  do hh = hmin, hmax
    do kk = kmin, kmax
      four
        ll   hh ,   kk, -0.5
        lr   hh ,   kk,  2.5
        ul   hh ,   kk, -0.5
      exit
#
      stack
        four
      exit
#
      output
        outfile "INDI/def.$2.%1D%1Dl_%4.2F_%4D",hh,kk,prob,indiv
        value   inte
        run
      exit
    enddo
  enddo
enddo
#
exit      # Back to suite
#
############################################################
# Plotting
############################################################
@kex_03 $2
wait return

